/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'yangchi' at '8/8/14 10:05 PM' with Gradle 2.0
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.0/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = '1.8'

mainClassName = 'modernj.Main'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

configurations{
    quasar
	checker
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.5'

    compile 'com.google.guava:guava:17.0'
    
    compile "co.paralleluniverse:quasar-actors:0.5.0"
    compile 'co.paralleluniverse:quasar-core:0.5.0:jdk8'
    quasar 'co.paralleluniverse:quasar-core:0.5.0:jdk8'

	checker 'org.checkerframework:jdk8:1.8.1'
	compile 'org.checkerframework:checker:1.8.1'
    
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.11'
}

run {
    systemProperty 'modernj.name', 'Yang'
    jvmArgs "-javaagent:${configurations.quasar.iterator().next()}"
    systemProperty "co.paralleluniverse.actors.moduleDir", "${rootProject.projectDir}/modules"
}

compileJava {
	options.fork = true
	options.forkOptions.jvmArgs = ["-Xbootclasspath/p:${configurations.checker.asPath}:${System.getenv('JAVA_HOME')}/lib/tools.jar"]
	options.compilerArgs = ['-processor', 'org.checkerframework.checker.nullness.NullnessChecker,org.checkerframework.checker.units.UnitsChecker,org.checkerframework.checker.tainting.TaintingChecker']
}
